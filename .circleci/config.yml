version: 2.1
jobs:
  build-mini:
    docker:
      - image: cimg/base:current-22.04
    parameters:
      variant:
        type:
          string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: make docker-minim<< parameters.variant >> GIT_DEPTH=--single-branch
          no_output_timeout: 30m
      - run:
          name: test image
          command: |
            mkdir test-results
            docker run --rm -v $PWD:/data ocrd/all:minim<< parameters.variant >> make -C /build/core deps-test test PYTEST_ARGS=--junitxml=/data/test-results/core.xml
      - store_test_results:
          path: test-results
  build-medi:
    docker:
      - image: cimg/base:current-22.04
    parameters:
      variant:
        type:
          string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          # override dependency (should come from cached layer) in make:
          command: make docker-medi<< parameters.variant >> -o docker-minim<< parameters.variant >> GIT_DEPTH=--single-branch
          no_output_timeout: 30m
      - run:
          name: test image
          command: |
            mkdir test-results
            docker run --rm -v $PWD:/data ocrd/all:medi<< parameters.variant >> make -C /build/core deps-test test PYTEST_ARGS=--junitxml=/data/test-results/core.xml
      - store_test_results:
          path: test-results
  build-maxi:
    docker:
      - image: cimg/base:current-22.04
    parameters:
      variant:
        type:
          string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          # override dependency (should come from cached layer) in make:
          command: make docker-maxim<< parameters.variant >> -o docker-medi<< parameters.variant >> GIT_DEPTH=--single-branch
          no_output_timeout: 30m
      - run:
          name: test image
          command: |
            mkdir test-results
            docker run --rm -v $PWD:/data ocrd/all:maxim<< parameters.variant >> make -C /build/core deps-test test PYTEST_ARGS=--junitxml=/data/test-results/core.xml
      - store_test_results:
          path: test-results
  deploy-mini:
    docker:
      - image: cimg/base:current-22.04
    parameters:
      variant:
        type:
          string
    steps:
      - checkout
      - setup_remote_docker      # https://circleci.com/docs/2.0/building-docker-images/
      - run:
          name: Alias Docker image
          command: docker tag ocrd/all:minim<< parameters.variant >> ocrd/all:minim<< parameters.variant >>-git
      - run:
          name: Login to Docker Hub
          command: echo "$DOCKERHUB_PASS" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Push images to Docker Hub
          no_output_timeout: 2.5h
          command: |
            docker push ocrd/all:minim<< parameters.variant >>
            docker push ocrd/all:minim<< parameters.variant >>-git
  deploy-medi:
    docker:
      - image: cimg/base:current-22.04
    parameters:
      variant:
        type:
          string
    steps:
      - checkout
      - setup_remote_docker      # https://circleci.com/docs/2.0/building-docker-images/
      - run:
          name: Alias Docker image
          command: docker tag ocrd/all:medi<< parameters.variant >> ocrd/all:medi<< parameters.variant >>-git
      - run:
          name: Login to Docker Hub
          command: echo "$DOCKERHUB_PASS" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Push images to Docker Hub
          no_output_timeout: 2.5h
          command: |
            docker push ocrd/all:medi<< parameters.variant >>
            docker push ocrd/all:medi<< parameters.variant >>-git
  deploy-maxi:
    docker:
      - image: cimg/base:current-22.04
    parameters:
      variant:
        type:
          string
    steps:
      - checkout
      - setup_remote_docker      # https://circleci.com/docs/2.0/building-docker-images/
      - run:
          name: Alias Docker image
          command: docker tag ocrd/all:maxim<< parameters.variant >> ocrd/all:maxim<< parameters.variant >>-git
      - run:
          name: Login to Docker Hub
          command: echo "$DOCKERHUB_PASS" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Push images to Docker Hub
          no_output_timeout: 2.5h
          command: |
            docker push ocrd/all:maxim<< parameters.variant >>
            docker push ocrd/all:maxim<< parameters.variant >>-git
      - when:
          condition:
            equal: [ um, << parameters.variant >> ]
          steps:
            - run:
                name: store ocrd-all-tool.json
                command: |
                  id=`docker create ocrd/all:maximum`
                  docker cp $id:/build/ocrd-all-tool.json .
            - store_artifacts:
                path: ocrd-all-tool.json
                destination: ocrd-all-tool.json
            - run:
                name: store ocrd-all-module-dir.json
                command: |
                  id=`docker create ocrd/all:maximum`
                  docker cp $id:/build/ocrd-all-module-dir.json .
            - store_artifacts:
                path: ocrd-all-module-dir.json
                destination: ocrd-all-module-dir.json
      - when:
          condition:
            equal: [ um-cuda, << parameters.variant >> ]
          steps:
            - run:
                name: Create a date-versioned mirror of ocrd/all:maximum-cuda
                command: bash release.sh release-dockerhub
            - run:
                name: Update badge
                command: curl -X POST "$MICROBADGER_WEBHOOK" || true
      - when:
          # takes too long for 1h1m CircleCI timeout overall
          # also, storage is limited...
          condition: false
          steps:
            - run:
                name: persist image
                command: |
                  sudo apt install pigz
                  docker image save ocrd/all:maxim<< parameters.variant >> | pigz --fast > ocrd-all-maximum.tar.gz
                no_output_timeout: 30m
            # can be downloaded from CircleCI.com and imported via "docker image load"
            - store_artifacts:
                path: ocrd-all-maximum.tar.gz
                destination: artifacts

workflows:
  version: 2
  build:
    jobs:
      - build-mini:
          name: build-minim<< matrix.variant >>
          matrix:
            parameters:
              variant: [um, um-cuda]
      - build-medi:
          name: build-medi<< matrix.variant >>
          matrix:
            parameters:
              variant: [um, um-cuda]
          requires:
            - build-minim<< matrix.variant >>
      - build-maxi:
          name: build-maxim<< matrix.variant >>
          matrix:
            parameters:
              variant: [um, um-cuda]
          requires:
            - build-medi<< matrix.variant >>
      - deploy-mini:
          name: deploy-minim<< matrix.variant >>
          matrix:
            parameters:
              variant: [um, um-cuda]
          requires:
            - build-minim<< matrix.variant >>
          filters:
            branches:
              only: master
      - deploy-medi:
          name: deploy-medi<< matrix.variant >>
          matrix:
            parameters:
              variant: [um, um-cuda]
          requires:
            - build-medi<< matrix.variant >>
          filters:
            branches:
              only: master
      - deploy-maxi:
          name: deploy-maxim<< matrix.variant >>
          matrix:
            parameters:
              variant: [um, um-cuda]
          requires:
            - build-maxim<< matrix.variant >>
          filters:
            branches:
              only: master
  
